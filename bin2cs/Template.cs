namespace bin2cs;
/// <summary>
/// Used to generate the C# source.
/// </summary>
public class Template
{
    public FileInfo File;

    public Template() { }

    public Template(FileInfo f)
    {
        File = f;
    }

    public (byte[], string) Process(Encoding enc = null)
    {
        var e = enc ?? Encoding.UTF8;
        var sb = new StringBuilder();
        sb.AppendLine("namespace bin2cs;\n/// <summary>\n///Generated by bin2cs\n/// </summary>");
        string stem = Path.GetFileNameWithoutExtension(File.Name);
        stem = $"{char.ToUpper(stem[0])}{stem[1..]}";
        sb.AppendLine($"public class {stem}");
        sb.Append("{\n\tpublic const string Name = ");
        sb.AppendLine($"\"{File.Name}\";");
        sb.AppendLine();
        sb.Append("\tpublic static readonly byte[] Data = {");
        using var f = File.OpenRead();
        Span<byte> data = new byte[f.Length];
        f.Read(data);
        f.Close();
        for (int i = 0; i < data.Length; i++)
        {
            if (i != data.Length - 1)
            {
                sb.Append($"0x{data[i].ToString("X")}, ");
            }
            else
            {
                sb.Append($"0x{data[i].ToString("X")}");
            }
            if ((i % 11) == 0 && i != 0 && i != (data.Length - 1))
            {
                sb.Append("\n\t\t");
            }
        }
        sb.Append("};\n}");
        return (e.GetBytes(sb.ToString()), stem + ".cs");
    }

    public static implicit operator Template(FileInfo f) => new(f);
}
